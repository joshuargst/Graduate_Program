{ui <-
dashboardPage(
dashboardHeader(title = "Joshua Registe"),
dashboardSidebar(HTML("<br><br><br>The following is shiny app is deployed for assignment 3 of Data 608.<br><br> <a href = https://github.com/charleyferrari/CUNY_DATA608/tree/master/lecture3/data> Click here for link to Mortality Data</a>. <br> <br> More data can be collected from <a href=https://wonder.cdc.gov/ucd-icd10.html> CDC here </a>.<br><br>This assignment is done in R using the shiny package and uses support packages 'shiny', 'shinydashboard', 'plotly', 'tidyverse', and 'dplyr'.<br>The app has 2 tabs for each question from Module 3 from Data 608 - Data Visualization" )
),
dashboardBody(
fluidRow(
tabBox(width = 100, height = 5000,
tabPanel("Question 1",
column(10,HTML("Question 1: <br><br> As a researcher, you frequently compare mortality rates from particular causes across different States. You need a visualization that will let you see (for 2010 only) the crude mortality rate, across all States, from one cause (for example, Neoplasms, which are effectively cancers). Create a visualization that allows you to rank States by crude mortality for each cause of death.<br><br><br><br><br>")),
column(10,plotlyOutput("Question1_PlotA")),
column(10, selectInput(width = 10000,inputId = "CauseofDeath", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
),
tabPanel("Question 2",
column(10, HTML("Question 2: <br><br>Often you are asked whether particular States are improving their mortality rates (per cause) faster than, or slower than, the national average. Create a visualization that lets your clients see this for themselves for one cause of death at the time. Keep in mind that the national average should be weighted by the national population.<br><br><br><br><br>")),
column(10,plotlyOutput("Question2_PlotA")),
column(10, selectInput(width = 10000,inputId = "LocationofDeath", label = "Select Location of Interest",
choices = sort(Location),
selected = 1)),
column(10, selectInput(width = 10000,inputId = "CauseofDeath2", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
)
)
)))
# Define server logic ----
server <- function(input, output) {
# coolplot1a --------------------------------------------------------------
output$Question1_PlotA<-renderPlotly({
Mortality2010<-Mortality2010 %>% filter(ICD.Chapter==input$CauseofDeath)
ggplotly(
ggplot(Mortality2010)+
geom_col(mapping = aes(x = reorder(State,Crude.Rate, FUN = sum), y = Crude.Rate), fill = 'grey50', alpha = .5)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90))+
labs(x = "Crude Death Rate",
y = "State",
title = paste0("States Ranked by Crude Mortality Rate\n",input$CauseofDeath)
)
)
})
# coolplot1b --------------------------------------------------------------
output$Question2_PlotA<-renderPlotly({
Mortalitydata_sub<- Mortalitydata %>% filter(State==input$LocationofDeath,ICD.Chapter==input$CauseofDeath2)
Allannot<-mean(filter(Mortalitydata,Year==2010, ICD.Chapter==input$CauseofDeath2)$Crude.Rate)
Subannot<-mean(filter(Mortalitydata_sub,Year==2010, ICD.Chapter==input$CauseofDeath2)$Crude.Rate)
ggplotly(
ggplot()+
stat_summary(data = filter(Mortalitydata,ICD.Chapter ==input$CauseofDeath2), geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
annotate(geom = "text", x = 2010.5, y =Allannot, label = "United\nStates")+
annotate(geom = "text", x = 2010.5, y =Subannot, label =input$LocationofDeath)+
labs(x = "Crude Mortality Rate",
y = "Year")
)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
{ui <-
dashboardPage(
dashboardHeader(title = "Joshua Registe"),
dashboardSidebar(HTML("<br><br><br>The following is shiny app is deployed for assignment 3 of Data 608.<br><br> <a href = https://github.com/charleyferrari/CUNY_DATA608/tree/master/lecture3/data> Click here for link to Mortality Data</a>. <br> <br> More data can be collected from <a href=https://wonder.cdc.gov/ucd-icd10.html> CDC here </a>.<br><br>This assignment is done in R using the shiny package and uses support packages 'shiny', 'shinydashboard', 'plotly', 'tidyverse', and 'dplyr'.<br>The app has 2 tabs for each question from Module 3 from Data 608 - Data Visualization" )
),
dashboardBody(
fluidRow(
tabBox(width = 100, height = 5000,
tabPanel("Question 1",
column(10,HTML("Question 1: <br><br> As a researcher, you frequently compare mortality rates from particular causes across different States. You need a visualization that will let you see (for 2010 only) the crude mortality rate, across all States, from one cause (for example, Neoplasms, which are effectively cancers). Create a visualization that allows you to rank States by crude mortality for each cause of death.<br><br><br><br><br>")),
column(10,plotlyOutput("Question1_PlotA")),
column(10, selectInput(width = 10000,inputId = "CauseofDeath", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
),
tabPanel("Question 2",
column(10, HTML("Question 2: <br><br>Often you are asked whether particular States are improving their mortality rates (per cause) faster than, or slower than, the national average. Create a visualization that lets your clients see this for themselves for one cause of death at the time. Keep in mind that the national average should be weighted by the national population.<br><br><br><br><br>")),
column(10,plotlyOutput("Question2_PlotA")),
column(10, selectInput(width = 10000,inputId = "LocationofDeath", label = "Select Location of Interest",
choices = sort(Location),
selected = 1)),
column(10, selectInput(width = 10000,inputId = "CauseofDeath2", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
)
)
)))
# Define server logic ----
server <- function(input, output) {
# coolplot1a --------------------------------------------------------------
output$Question1_PlotA<-renderPlotly({
Mortality2010<-Mortality2010 %>% filter(ICD.Chapter==input$CauseofDeath)
ggplotly(
ggplot(Mortality2010)+
geom_col(mapping = aes(x = reorder(State,Crude.Rate, FUN = sum), y = Crude.Rate), fill = 'grey50', alpha = .5)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90))+
labs(x = "Crude Death Rate",
y = "State",
title = paste0("States Ranked by Crude Mortality Rate\n",input$CauseofDeath)
)
)
})
# coolplot1b --------------------------------------------------------------
output$Question2_PlotA<-renderPlotly({
Mortalitydata_sub<- Mortalitydata %>% filter(State==input$LocationofDeath,ICD.Chapter==input$CauseofDeath2)
Allannot<-mean(filter(Mortalitydata,Year==2010, ICD.Chapter==input$CauseofDeath2)$Crude.Rate)
Subannot<-mean(filter(Mortalitydata_sub,Year==2010, ICD.Chapter==input$CauseofDeath2)$Crude.Rate)
ggplotly(
ggplot()+
stat_summary(data = filter(Mortalitydata,ICD.Chapter ==input$CauseofDeath2), geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
annotate(geom = "text", x = 2010.5, y =Allannot, label = "United\nStates")+
annotate(geom = "text", x = 2010.5, y =Subannot, label =input$LocationofDeath)+
labs(y = "Crude Mortality Rate",
x = "Year")
)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
runApp('JoshuaRegisteModule3')
knitr::opts_chunk$set(echo = TRUE)
library(openintro)
data(bdims)
par(mar=c(3.7,2.5,0.5,0.5), las=1, mgp=c(2.5,0.7,0), cex.lab = 1.5)
histPlot(bdims$hgt, col = COL[1], xlab = "Height", ylab = "")
mean(bdims$hgt)
paste0("The point estimate for the average height is ",mean(bdims$hgt))
paste0("The point estimate for the median height is ",round(median(bdims$hgt),1))
quantile(bdims$hgt,.95)
quantile(bdims$hgt,.95,na.rm = T)
paste0("The point estimate for the Interquartile range ",round(quantile(bdims$hgt,.75,na.rm = T)-quantile(bdims$hgt,.25,na.rm = T),1))
paste0("The point estimate for the Interquartile range is\n",
round(quantile(bdims$hgt,.75,na.rm = T)-quantile(bdims$hgt,.25,na.rm = T),1))
seq(1,100,2)
length(seq(1,100,2))
?rep
rep("support",.88*5)
rep("support",.88*100)
rep("support",.88*1)
rep("support",.88*2)
pop = 250000000
all<-c(rep("support",.88*pop),rep("not",.12*pop))
?sample
sampled_entries<-sample(pop, size= 1000)
sampled_entries<-sample(all, size= 1000)
hist(sampled_entries)
sum(sampled_entries=="support")/1000
bind(1,1)
combine(1,1)
combine(1)
pop = 250000000
all<-c(rep("support",.88*pop),rep("not",.12*pop))
x<-  combine(sum(sampled_entries=="support")/1000)
sampled_entries<-sample(all, size= 1000)
x<-  combine(sum(sampled_entries=="support")/1000)
for (i in 1:1000){
sampled_entries<-sample(all, size= 1000)
y<-  combine(x,sum(sampled_entries=="support")/1000)
}
sampled_entries<-sample(all, size= 1000)
y<-  combine(x,sum(sampled_entries=="support")/1000)
y<-  combine(x,sum(sampled_entries=="support")/1000)
y<-  combine(x,sum(sampled_entries=="support")/1000)
for (i in 1:1000){
sampled_entries<-sample(all, size= 1000)
y<-  combine(x,sum(sampled_entries=="support")/1000)
}
y<-  combine(x,sum(sampled_entries=="support")/1000)
combine(x,x,x,x)
x = (c(1,2,4))
combine(x, 1)
for (i in 1:1000){
sampled_entries<-sample(all, size= 1000)
y<-  combine(y,x,sum(sampled_entries=="support")/1000)
}
y<-  combine(y,sum(sampled_entries=="support")/1000)
y = sum(sampled_entries=="support")/1000
for (i in 1:1000){
sampled_entries<-sample(all, size= 1000)
y<-  combine(y,sum(sampled_entries=="support")/1000)
}
hist(y)
mean(y)
y = sum(sampled_entries=="support")/1000
for (i in 1:1000){
sampled_entries<-sample(all, size= 1000)
y<-  combine(y,sum(sampled_entries=="support")/1000)
}
hist(y)
meany
mean(y)
y = sum(sampled_entries=="support")/1000
sampled_entries<-sample(all, size= 100)
y = sum(sampled_entries=="support")/100
for (i in 1:1000){
sampled_entries<-sample(all, size= 100)
y<-  combine(y,sum(sampled_entries=="support")/100)
}
hist(y)
mean(y)
sampled_entries<-sample(all, size= 10)
y = sum(sampled_entries=="support")/10
for (i in 1:1000){
sampled_entries<-sample(all, size= 10)
y<-  combine(y,sum(sampled_entries=="support")/10)
}
hist(y)
mean(y)
hist(y)
z = (180 - mean(bdims$hgt,na.rm = T))/(sd(bdims$hgt,na.rm = T))
qnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T))
pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T))
pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T))
pnorm(170,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T))
paste0("The point estimate for the average height is ",round(mean(bdims$hgt),0))
pnorm(171,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T))
pnorm(171.1,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T))
pnorm(3,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T))
?pnorm
pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = T)
pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F)
pnorm(155,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F)
pnorm(155,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = T)
paste0("The probability that someone is taller than 180 cm is approximately ",
round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),2))
paste0("The probability that someone is shorter than 180 cm is approximately ",
round(pnorm(155,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = T),2))
?format
library(scales)
paste0("The point estimate for the Interquartile range is",
percent(round(quantile(bdims$hgt,.75,na.rm = T)-quantile(bdims$hgt,.25,na.rm = T),1)))
paste0("The point estimate for the Interquartile range is",
round(quantile(bdims$hgt,.75,na.rm = T)-quantile(bdims$hgt,.25,na.rm = T),1))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),2)))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),3)))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4)))
round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4)
?percent
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4),3))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4),10))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4),10))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4),.1))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4),.2))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4),.01))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4),.0))
paste0("The probability that someone is taller than 180 cm is approximately ",
percent(round(pnorm(180,mean(bdims$hgt,na.rm = T),sd(bdims$hgt,na.rm = T),lower.tail = F),4),.1))
paste0("The probability that someone is shorter than 155 cm is approximately ",
percent(round(pnorm(155,mean(bdims$hgt,na.rm = F),sd(bdims$hgt,na.rm = T),lower.tail = T),4),.1))
?sd()
(SD = mean(bdims$hgt)/ sqrt(length(bdims$hgt)))
sd(bdims$hgt)
data(tgSpending)
par(mar=c(3.7,2.2,0.5,0.5), las=1, mgp=c(2.5,0.7,0), cex.lab = 1.5)
histPlot(tgSpending$spending, col = COL[1], xlab = "Spending", ylab = "")
(a) We are 95% confident that the average spending of these 436 American adults is between $80.31 and $89.11.
mean(tgspending)
mean(tgSpending)
mean(tgSpending$spending)
sd(tgSpending)
sd(tgSpending$spending)
mean(tgSpending$spending)
sd(tgSpending$spending)
qnorm(.95)
?qnorm(.95)
qnorm(.95, lower.tail = F)
qnorm(.95)
pnorm(1)
pnorm(2)
pnorm(1.96)
qnorm(.05)
qnorm(.05/2)
qnorm(.05/2, lower.tail = T)
qnorm(.05/2, lower.tail = F)
mean(tgSpending$spending)
sd(tgSpending$spending)
(Upper_Est<- mean(tgSpending$spending)+sd(tgSpending$spending))
(Lower_Est<- mean(tgSpending$spending)+sd(tgSpending$spending))
(Lower_Est<- mean(tgSpending$spending)-sd(tgSpending$spending))
(Upper_Est<- mean(tgSpending$spending)+sd(tgSpending$spending))
(Lower_Est<- mean(tgSpending$spending)-sd(tgSpending$spending))
u = mean(tgSpending$spending)
SE = sqrt(u(1-u)/length(tgSpending$spending))
u = mean(tgSpending$spending)
SE = sqrt(u(1-u)/length(tgSpending$spending))
u = mean(tgSpending$spending)
SE = sqrt(u(1-u)/length(tgSpending$spending))
SE = sqrt(u(u-1)/length(tgSpending$spending))
u
1-u
sqrt(u(1-u)
sqrt(u(1-u))
SE = sqrt(u*(1-u)/length(tgSpending$spending))
SE = sqrt(u*(u-1)/length(tgSpending$spending))
(Upper_Est<- mean(tgSpending$spending)+sd(tgSpending$spending))
(Lower_Est<- mean(tgSpending$spending)-sd(tgSpending$spending))
qnorm(.975)
(Upper_Est<- Average_spending + Std_spending * qnorm(.975))
(Lower_Est<- Average_spending - Std_spending * qnorm(.975))
Average_spending<-mean(tgSpending$spending)
(Upper_Est<- Average_spending + Std_spending * qnorm(.975))
(Lower_Est<- Average_spending - Std_spending * qnorm(.975))
Std_spending<-sd(tgSpending$spending)
(Upper_Est<- Average_spending + Std_spending * qnorm(.975))
(Lower_Est<- Average_spending - Std_spending * qnorm(.975))
Spending_error<- qnorm(.975)*Std_spending/sqrt(length(tgSpending$spending))
Average_spending<-mean(tgSpending$spending)
Std_spending<-sd(tgSpending$spending)
Spending_error<- qnorm(.975)*Std_spending/sqrt(length(tgSpending$spending))
(Upper_Est<- Average_spending + Spending_error)
(Lower_Est<- Average_spending - Spending_error)
Average_spending<-mean(tgSpending$spending)
Std_spending<-sd(tgSpending$spending)
Spending_error<- qnorm(.95)*Std_spending/sqrt(length(tgSpending$spending))
(Upper_Est<- Average_spending + Spending_error)
(Lower_Est<- Average_spending - Spending_error)
(Upper_Est<- Average_spending + Spending_error)
(Lower_Est<- Average_spending - Spending_error)
Spending_error<- qnorm(.90)*Std_spending/sqrt(length(tgSpending$spending))
(Upper_Est<- Average_spending + Spending_error)
(Lower_Est<- Average_spending - Spending_error)
Spending_error<- qnorm(.80)*Std_spending/sqrt(length(tgSpending$spending))
(Upper_Est<- Average_spending + Spending_error)
(Lower_Est<- Average_spending - Spending_error)
qnorm(.80)
1-qnorm(.5/2,lower.tail = F)
1-qnorm(.05/2,lower.tail = F)
1-qnorm(.05/2,lower.tail = T)
1+qnorm(.05/2,lower.tail = F)
qnorm(.05/2,lower.tail = F)
Spending_error<- qnorm(.975)*Std_spending/sqrt(length(tgSpending$spending))
qnorm(.05/2,lower.tail = F)
qnorm(.975)
qnorm(.1/2,lower.tail = F)
qnorm(.95)
Average_spending<-mean(tgSpending$spending)
Std_spending<-sd(tgSpending$spending)
Spending_error<- qnorm(.95)*Std_spending/sqrt(length(tgSpending$spending))
(Upper_Est<- Average_spending + Spending_error)
(Lower_Est<- Average_spending - Spending_error)
Average_spending<-mean(tgSpending$spending)
Std_spending<-sd(tgSpending$spending)
Spending_error<- qnorm(.975)*Std_spending/sqrt(length(tgSpending$spending))
(Upper_Est<- Average_spending + Spending_error)
(Lower_Est<- Average_spending - Spending_error)
(Spending_error<- qnorm(.975)*Std_spending/sqrt(length(tgSpending$spending)))
(Spending_error<- qnorm(.975)*Std_spending/(sqrt(length(tgSpending$spending)*3)))
4.4/3
(Spending_error<- qnorm(.975)*Std_spending/(sqrt(length(tgSpending$spending)*9)))
(Spending_error<- qnorm(.975)*Std_spending/(sqrt(length(tgSpending$spending)*3^3)))
(Spending_error<- qnorm(.975)*Std_spending/(sqrt(length(tgSpending$spending)*(3^3)))))
(Spending_error<- qnorm(.975)*Std_spending/(sqrt(length(tgSpending$spending)*(3^3))))
(Spending_error<- qnorm(.975)*Std_spending/(sqrt(length(tgSpending$spending)*(3^2))))
(Spending_error<- qnorm(.975)*Std_spending/(sqrt(length(tgSpending$spending)*3^2)))
Spending_error<- qnorm(.95)*Std_spending/sqrt(length(tgSpending$spending))
Spending_error<- qnorm(.975)*Std_spending/sqrt(length(tgSpending$spending))
data(gifted)
par(mar=c(3.7,2.2,0.5,0.5), las=1, mgp=c(2.5,0.7,0), cex.lab = 1.5)
histPlot(gifted$count, col = COL[1],
xlab = "Age child first counted to 10 (in months)", ylab = "",
axes = FALSE)
axis(1)
axis(2, at = c(0,3,6))
(SE = sd(bdims$hgt)/ sqrt(length(bdims$hgt)))
View(gifted)
sample_mean = mean(gifted$count)
(sample_mean = mean(gifted$count))
(sample_sd = sd(gifted$count))
qnorm(.95)
sample_error = qnorm(.95)*sample_sd/sqrt(length(gifted$count))
paste("The upper limit = ", sample_mean+sample_error)
paste("The upper limit = ", round(sample_mean+sample_error),1)
paste("The lower limit = ", round(sample_mean-sample_error),1)
paste("The upper limit = ", round(sample_mean+sample_error,1))
paste("The lower limit = ", round(sample_mean-sample_error,1))
(sample_mean = mean(gifted$count))
(sample_sd = sd(gifted$count))
sample_error = qnorm(.95)*sample_sd/sqrt(length(gifted$count))
paste("The upper limit = ", round(sample_mean+sample_error,1))
paste("The lower limit = ", round(sample_mean-sample_error,1))
(sample_mean = mean(gifted$count))
z <- (30.69-sample_mean)/sample_sd
pnorm(-8.125)
qnorm(.95)
pnorm(qnorm(.95))
cv<-pnorm(qnorm(.95), mean = sample_mean)
(cv<-pnorm(qnorm(.95), mean = sample_mean))
(sample_error = qnorm(.975)*sample_sd/sqrt(length(gifted$count)))
paste("The upper limit = ", round(sample_mean+sample_error,1))
paste("The lower limit = ", round(sample_mean-sample_error,1))
z <- (30.69-sample_mean)/sample_sd
pnorm(z)
z <- (30.69-sample_mean)/sample_sd
pnorm(z)
(z <- (30.69-sample_mean)/sample_sd)
z <- (30.69-sample_mean)/sample_sd
pnorm(z)
pnorm(z)*2
data(gifted)
par(mar=c(3.7,2.2,0.5,0.5), las=1, mgp=c(2.5,0.7,0), cex.lab = 1.5)
histPlot(gifted$motheriq, col = COL[1],
xlab = "Mother's IQ", ylab = "", axes = FALSE)
axis(1)
axis(2, at = c(0,4,8,12))
population_mean = 100
paste("sample Mean")
population_mean = 100
paste("sample Mean")
(sample_mean = mean(gifted$motheriq))
paste("Sample Standard Deviation")
(sample_sd = sd(gifted$motheriq))
paste("Sample Error")
(sample_error = qnorm(.975)*sample_sd/sqrt(length(gifted$motheriq)))
paste("The upper limit = ", round(sample_mean+sample_error,1))
paste("The lower limit = ", round(sample_mean-sample_error,1))
cv = qnorm(pnorm(.95))
pval = pnorm(cv, sample_mean)
(pval = pnorm(cv, sample_mean))
(pval = pnorm(cv, sample_mean, sample_sd))
(sample_error = qnorm(.95)*sample_sd/sqrt(length(gifted$motheriq)))
paste("The upper limit = ", round(sample_mean+sample_error,1))
paste("The lower limit = ", round(sample_mean-sample_error,1))
z = (10500-9000)/1000
pnorm(z)
pnorm(z,9000,1000)
pnorm(z)
pnorm(10500,9000,1000)
1-pnorm(10500,9000,1000)
SE = 1.96*1000/sqrt(15)
9000+SE
9000-SE
z = (10500-9000)/1000
pnorm(10500)
1-pnorm(10500,9000)
pnorm(10500,9000)
pnorm(10500,10501)
SE = 1.96*8/sqrt(16)
x <- seq(-1,1, .01)
y <- dnorm(x, 9000,1000)
plot(x,y)
x <- seq(-1,1, .01)
y <- dnorm(x, 9000,1000)
x <- seq(-100,100, .01)
y <- dnorm(x, 9000,1000)
plot(x,y)
x <- seq(-10,10, .01)
y <- dnorm(x, 2.5,.5)
plot(x,y)
x <- seq(-10,10, .02)
x <- seq(-10,10, .1)
y <- dnorm(x, 2.5,.5)
plot(x,y)
x <- seq(-50000,50000, 1)
y <- dnorm(x, 9000,1000)
plot(x,y)
x <- seq(-20000,20000, 1)
y <- dnorm(x, 9000,1000)
plot(x,y)
x <- seq(-10000,10000, 1)
y <- dnorm(x, 9000,1000)
plot(x,y)
x <- seq(5000,15000, 1)
y <- dnorm(x, 9000,1000)
plot(x,y)
x <- seq(5000,14000, 1)
y <- dnorm(x, 9000,1000)
plot(x,y)
y <- dnorm(x, 10000,1000)
plot(x,c(y,y2))
y2 <- dnorm(x, 9000,1000)
plot(x,c(y,y2))
plot(c(x,x),c(y,y2))
plot(c(x,x),c(y,y2), color = c("blue","red"))
x <- seq(5000,14000, 1)
y <- dnorm(x, 9000,1000)
y <- dnorm(x, 10500,1000)
plot(c(x,x),c(y,y2))
y <- dnorm(x, 9500,1000)
y <- dnorm(x, 9000,1000)
y2 <- dnorm(x, 9500,1000)
plot(c(x,x),c(y,y2))
setwd('C:/Users/joshu/OneDrive - CDM Smith/Documents/CUNY SPS/606/Assignments')
###setwd first!!!!!
startLab('Lab5a')
###setwd first!!!!!
startLab('Lab5')
library(DATA606)
###setwd first!!!!!
startLab('Lab5a')
###setwd first!!!!!
startLab('Lab5b')
