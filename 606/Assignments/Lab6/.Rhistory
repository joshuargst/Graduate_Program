})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
ggplot(Mortalitydata)+
stat_summary(geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean)
ggplot(Mortalitydata)+
stat_summary(geom = "bar", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean)
ggplot(Mortalitydata)+
stat_summary(geom = "point", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean)
ggplot(Mortalitydata)+
stat_summary(geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean)
ggplot(Mortalitydata)+
stat_summary(geom = "line", mapping = aes(x = Year, y = Crude.Rate, color = ICD.Chapter), fun.y = mean)
x[1]
Mortalitydata_sub<- Mortalitydata %>% filter(Year==2010, ICD.Chapter==x[1])
View(Mortalitydata_sub)
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean)+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean)
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")
ggplot()+
#  stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")
Mortalitydata_sub<- Mortalitydata %>% filter(ICD.Chapter==x[1])
ggplot()+
#  stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_minimal()
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_bw()
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_bw()+
theme(panel.grid.major = element_blank())
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_bw()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate, color = "This"), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate, color = "that"), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate, color = "This"), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate, color = "red"), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate, color = "This"), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
Location<-as.vector(unique(Mortalitydata$State))
location?
Mortalitydata<- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture3/data/cleaned-cdc-mortality-1999-2010-2.csv")
?location
{ui <-
dashboardPage(
dashboardHeader(title = "Mortality Rate"),
dashboardSidebar(
),
dashboardBody(
fluidRow(
tabBox(width = 100, height = 5000,
tabPanel("Question 1",
column(10,plotlyOutput("Question1_PlotA")),
column(10, selectInput(width = 10000,inputId = "CauseofDeath", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
),
tabPanel("Question 2",
column(10,plotlyOutput("Question2_PlotA")),
column(10, selectInput(width = 10000,inputId = "RateofDeath", label = "Select Location of Interest",
choices = sort(Location),
selected = 1))
)
)
)))
# Define server logic ----
server <- function(input, output) {
# coolplot1a --------------------------------------------------------------
output$Question1_PlotA<-renderPlotly({
Mortality2010<-Mortality2010 %>% filter(ICD.Chapter==input$CauseofDeath)
ggplotly(
ggplot(Mortality2010)+
geom_col(mapping = aes(x = reorder(State,Crude.Rate, FUN = sum), y = Crude.Rate), fill = 'grey50', alpha = .5)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90))+
labs(x = "Crude Death Rate",
y = "State",
title = paste0("States Ranked by Crude Mortality Rate\n",input$CauseofDeath)
)
)
})
# coolplot1b --------------------------------------------------------------
output$Question2_PlotA<-renderPlotly({
Mortalitydata_sub<- Mortalitydata %>% filter(ICD.Chapter==input$RateofDeath)
ggplotly(
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate, color), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(x = "Date",
y = "Crude Mortality Rate",
title = "Mortality Rate over Time")
)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
{ui <-
dashboardPage(
dashboardHeader(title = "Mortality Rate"),
dashboardSidebar(
),
dashboardBody(
fluidRow(
tabBox(width = 100, height = 5000,
tabPanel("Question 1",
column(10,plotlyOutput("Question1_PlotA")),
column(10, selectInput(width = 10000,inputId = "CauseofDeath", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
),
tabPanel("Question 2",
column(10,plotlyOutput("Question2_PlotA")),
column(10, selectInput(width = 10000,inputId = "RateofDeath", label = "Select Location of Interest",
choices = sort(Location),
selected = 1))
)
)
)))
# Define server logic ----
server <- function(input, output) {
# coolplot1a --------------------------------------------------------------
output$Question1_PlotA<-renderPlotly({
Mortality2010<-Mortality2010 %>% filter(ICD.Chapter==input$CauseofDeath)
ggplotly(
ggplot(Mortality2010)+
geom_col(mapping = aes(x = reorder(State,Crude.Rate, FUN = sum), y = Crude.Rate), fill = 'grey50', alpha = .5)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90))+
labs(x = "Crude Death Rate",
y = "State",
title = paste0("States Ranked by Crude Mortality Rate\n",input$CauseofDeath)
)
)
})
# coolplot1b --------------------------------------------------------------
output$Question2_PlotA<-renderPlotly({
Mortalitydata_sub<- Mortalitydata %>% filter(ICD.Chapter==input$RateofDeath)
ggplotly(
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(x = "Date",
y = "Crude Mortality Rate",
title = "Mortality Rate over Time")
)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
{ui <-
dashboardPage(
dashboardHeader(title = "Mortality Rate"),
dashboardSidebar(
),
dashboardBody(
fluidRow(
tabBox(width = 100, height = 5000,
tabPanel("Question 1",
column(10,plotlyOutput("Question1_PlotA")),
column(10, selectInput(width = 10000,inputId = "CauseofDeath", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
),
tabPanel("Question 2",
column(10,plotlyOutput("Question2_PlotA")),
column(10, selectInput(width = 10000,inputId = "RateofDeath", label = "Select Location of Interest",
choices = sort(Location),
selected = 1))
)
)
)))
# Define server logic ----
server <- function(input, output) {
# coolplot1a --------------------------------------------------------------
output$Question1_PlotA<-renderPlotly({
Mortality2010<-Mortality2010 %>% filter(ICD.Chapter==input$CauseofDeath)
ggplotly(
ggplot(Mortality2010)+
geom_col(mapping = aes(x = reorder(State,Crude.Rate, FUN = sum), y = Crude.Rate), fill = 'grey50', alpha = .5)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90))+
labs(x = "Crude Death Rate",
y = "State",
title = paste0("States Ranked by Crude Mortality Rate\n",input$CauseofDeath)
)
)
})
# coolplot1b --------------------------------------------------------------
output$Question2_PlotA<-renderPlotly({
Mortalitydata_sub<- Mortalitydata %>% filter(ICD.Chapter==input$RateofDeath)
ggplotly(
ggplot()+
# stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(x = "Date",
y = "Crude Mortality Rate",
title = "Mortality Rate over Time")
)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
{ui <-
dashboardPage(
dashboardHeader(title = "Mortality Rate"),
dashboardSidebar(
),
dashboardBody(
fluidRow(
tabBox(width = 100, height = 5000,
tabPanel("Question 1",
column(10,plotlyOutput("Question1_PlotA")),
column(10, selectInput(width = 10000,inputId = "CauseofDeath", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
),
tabPanel("Question 2",
column(10,plotlyOutput("Question2_PlotA")),
column(10, selectInput(width = 10000,inputId = "RateofDeath", label = "Select Location of Interest",
choices = sort(Location),
selected = 1))
)
)
)))
# Define server logic ----
server <- function(input, output) {
# coolplot1a --------------------------------------------------------------
output$Question1_PlotA<-renderPlotly({
Mortality2010<-Mortality2010 %>% filter(ICD.Chapter==input$CauseofDeath)
ggplotly(
ggplot(Mortality2010)+
geom_col(mapping = aes(x = reorder(State,Crude.Rate, FUN = sum), y = Crude.Rate), fill = 'grey50', alpha = .5)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90))+
labs(x = "Crude Death Rate",
y = "State",
title = paste0("States Ranked by Crude Mortality Rate\n",input$CauseofDeath)
)
)
})
# coolplot1b --------------------------------------------------------------
output$Question2_PlotA<-renderPlotly({
Mortalitydata_sub<- Mortalitydata %>% filter(ICD.Chapter==input$RateofDeath)
ggplotly(
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
# stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(x = "Date",
y = "Crude Mortality Rate",
title = "Mortality Rate over Time")
)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
{ui <-
dashboardPage(
dashboardHeader(title = "Mortality Rate"),
dashboardSidebar(
),
dashboardBody(
fluidRow(
tabBox(width = 100, height = 5000,
tabPanel("Question 1",
column(10,plotlyOutput("Question1_PlotA")),
column(10, selectInput(width = 10000,inputId = "CauseofDeath", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
),
tabPanel("Question 2",
column(10,plotlyOutput("Question2_PlotA")),
column(10, selectInput(width = 10000,inputId = "RateofDeath", label = "Select Location of Interest",
choices = sort(Location),
selected = 1))
)
)
)))
# Define server logic ----
server <- function(input, output) {
# coolplot1a --------------------------------------------------------------
output$Question1_PlotA<-renderPlotly({
Mortality2010<-Mortality2010 %>% filter(ICD.Chapter==input$CauseofDeath)
ggplotly(
ggplot(Mortality2010)+
geom_col(mapping = aes(x = reorder(State,Crude.Rate, FUN = sum), y = Crude.Rate), fill = 'grey50', alpha = .5)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90))+
labs(x = "Crude Death Rate",
y = "State",
title = paste0("States Ranked by Crude Mortality Rate\n",input$CauseofDeath)
)
)
})
# coolplot1b --------------------------------------------------------------
output$Question2_PlotA<-renderPlotly({
Mortalitydata_sub<- Mortalitydata %>% filter(ICD.Chapter==input$RateofDeath)
ggplotly(
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(x = "Date",
y = "Crude Mortality Rate",
title = "Mortality Rate over Time")
)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
{ui <-
dashboardPage(
dashboardHeader(title = "Mortality Rate"),
dashboardSidebar(
),
dashboardBody(
fluidRow(
tabBox(width = 100, height = 5000,
tabPanel("Question 1",
column(10,plotlyOutput("Question1_PlotA")),
column(10, selectInput(width = 10000,inputId = "CauseofDeath", label = "Select Cause of Death",
choices = sort(CauseofDeaths),
selected = 1))
),
tabPanel("Question 2",
column(10,plotlyOutput("Question2_PlotA")),
column(10, selectInput(width = 10000,inputId = "RateofDeath", label = "Select Location of Interest",
choices = sort(Location),
selected = 1))
)
)
)))
# Define server logic ----
server <- function(input, output) {
# coolplot1a --------------------------------------------------------------
output$Question1_PlotA<-renderPlotly({
Mortality2010<-Mortality2010 %>% filter(ICD.Chapter==input$CauseofDeath)
ggplotly(
ggplot(Mortality2010)+
geom_col(mapping = aes(x = reorder(State,Crude.Rate, FUN = sum), y = Crude.Rate), fill = 'grey50', alpha = .5)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90))+
labs(x = "Crude Death Rate",
y = "State",
title = paste0("States Ranked by Crude Mortality Rate\n",input$CauseofDeath)
)
)
})
# coolplot1b --------------------------------------------------------------
output$Question2_PlotA<-renderPlotly({
Mortalitydata_sub<- Mortalitydata %>% filter(State==input$RateofDeath)
ggplotly(
ggplot()+
stat_summary(data = Mortalitydata, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "red")+
stat_summary(data = Mortalitydata_sub, geom = "line", mapping = aes(x = Year, y = Crude.Rate), fun.y = mean, color = "black")+
theme_classic()+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
labs(x = "Date",
y = "Crude Mortality Rate",
title = "Mortality Rate over Time")
)
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
}
library(DATA606)
setwd('C:/Users/joshu/OneDrive - CDM Smith/Documents/CUNY SPS/606/Assignments')
###setwd first!!!!!
startLab('Lab56')
###setwd first!!!!!
startLab('Lab6')
load("more/atheism.RData")
View(atheism)
us12 <- subset(atheism, nationality == "United States" & year == "2012")
length(us12)
length(us12)
nrow(us12)/nrow(athiesm)
nrow(us12)/nrow(atheism)
paste0("Percentage of atheist is equal to ",round(nrow(us12)/nrow(atheism)*100,1),"%")
View(atheism)
View(us12)
View(us12)
us12[response == "atheist"]
View(us12)
us12[us12$response == "atheist"]
us12[us12$response == "atheist"]
us12$response[response == "atheist"]
us12[response == "atheist"]
us12[us12$response == "atheist"]
us12$response == "atheist"]
us12$response == "atheist"
us12[1]
us12(us12$response == "atheist")
us12[c(us12$response == "atheist")]
us12[(us12$response == "atheist")]
us12[(response == "atheist")]
us12[c(response == "atheist")]
us12$response[us12$response == "atheist"]
nrow(us12$response[us12$response == "atheist"])
length(us12$response[us12$response == "atheist"])
length(us12$response[us12$response == "atheist"])/length(us12$response[us12$response != "atheist"])
us12 <- subset(atheism, nationality == "United States" & year == "2012")
us12 <- subset(atheism, nationality == "United States" & year == "2012")
length(us12$response[us12$response == "atheist"])/length(us12$response[us12$response != "atheist"])*100
nrow(us12[])
paste0("Percentage of atheist is equal to ",round(length(us12$response[us12$response == "atheist"])/length(us12$response[us12$response != "atheist"])*100
,1),"%")
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
inference(us12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
View(us12)
View(atheism)
china12 <- subset(atheism, nationality == "China" & year == "2012")
ghana12 <- subset(atheism, nationality == "Ghana" & year == "2012")
ghana12 <- subset(atheism, nationality == "Ghana" & year == "2012")
inference(ghana12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
ghana12 <- subset(atheism, nationality == "vietnam" & year == "2012")
ghana12 <- subset(atheism, nationality == "Ghana" & year == "2012")
View(china12)
View(ghana12)
ghana12 <- subset(atheism, nationality == "Vietnam" & year == "2012")
inference(ghana12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
inference(vietnam12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
```{r ghana-atheism-ci, eval=TRUE, tidy = FALSE}
vietnam12 <- subset(atheism, nationality == "Vietnam" & year == "2012")
inference(vietnam12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
vietnam12 <- subset(atheism, nationality == "Canada" & year == "2012")
inference(vietnam12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
inference(canada12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
canada12 <- subset(atheism, nationality == "Canada" & year == "2012")
inference(canada12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
china12 <- subset(atheism, nationality == "China" & year == "2012")
inference(china12$response, est = "proportion", type = "ci", method = "theoretical",
success = "atheist")
n <- 1000
p <- seq(0, 1, 0.01)
me <- 2 * sqrt(p * (1 - p)/n)
plot(me ~ p, ylab = "Margin of Error", xlab = "Population Proportion")
p <- 0.1
n <- 1040
p_hats <- rep(0, 5000)
for(i in 1:5000){
samp <- sample(c("atheist", "non_atheist"), n, replace = TRUE, prob = c(p, 1-p))
p_hats[i] <- sum(samp == "atheist")/n
}
hist(p_hats, main = "p = 0.1, n = 1040", xlim = c(0, 0.18))
